CREATE TABLE IF NOT EXISTS `active_trip` (
`id` INTEGER NOT NULL PRIMARY KEY,
`is_extra` INTEGER NOT NULL,
`direction` TEXT,
`shift` TEXT,
`date` TEXT NOT NULL,
`status` TEXT NOT NULL,
`created_at` TEXT NOT NULL,
`updated_at` TEXT NOT NULL,
`issued_at` TEXT,
`only_bus_transfer` INTEGER NOT NULL,
`segments` TEXT NOT NULL,
`refund_applications` TEXT NOT NULL,
`start_station_code` TEXT,
`start_station_name` TEXT,
`end_station_code` TEXT,
`end_station_name` TEXT);


countActiveTripSortedByDate:
SELECT count(*) FROM active_trip WHERE (status IN ?) AND ((direction IN ?
AND direction IS NOT NULL) OR (direction IS NULL AND 'to-work' IN ? AND 'to-home'
IN ?));

countActiveTripSortedByStatus:
SELECT count(*) FROM active_trip WHERE (status IN ?) AND ((direction IN ? AND direction IS NOT NULL)
OR (direction IS NULL AND 'to-work' IN ? AND 'to-home' IN ?));

getActiveTripsSortedByDate:
SELECT * FROM active_trip WHERE (status IN ?) AND ((direction IN ?
AND direction IS NOT NULL) OR (direction IS NULL AND 'to-work' IN ? AND 'to-home'
IN ?)) ORDER BY date ASC LIMIT :limit OFFSET :offset;

getActiveTripsSortedByStatus:
SELECT * FROM active_trip WHERE (status IN ?) AND ((direction IN ? AND direction IS NOT NULL)
OR (direction IS NULL AND 'to-work' IN ? AND 'to-home' IN ?))
ORDER BY
status = 'issued',
status = 'partly',
status = 'opened',
status = 'returned',
date ASC LIMIT :limit OFFSET :offset;

insertActiveTrips:
INSERT OR REPLACE INTO active_trip(id, is_extra, direction, shift, date, status, created_at,
 updated_at, issued_at, only_bus_transfer, segments, refund_applications,
 start_station_code, start_station_name, end_station_code, end_station_name) VALUES (?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteActiveTrips:
DELETE FROM active_trip;
